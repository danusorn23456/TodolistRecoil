[{"C:\\project\\todolist-recoil\\src\\index.js":"1","C:\\project\\todolist-recoil\\src\\components\\TodoList.js":"2","C:\\project\\todolist-recoil\\src\\components\\TodoInput.js":"3","C:\\project\\todolist-recoil\\src\\components\\TodoFilter.js":"4","C:\\project\\todolist-recoil\\src\\App.js":"5","C:\\project\\todolist-recoil\\src\\components\\TodoItem.js":"6","C:\\project\\todolist-recoil\\src\\store\\todoList.js":"7"},{"size":531,"mtime":1607104804774,"results":"8","hashOfConfig":"9"},{"size":482,"mtime":1607206227936,"results":"10","hashOfConfig":"9"},{"size":1164,"mtime":1607206336796,"results":"11","hashOfConfig":"9"},{"size":1449,"mtime":1607206346746,"results":"12","hashOfConfig":"9"},{"size":537,"mtime":1607206249074,"results":"13","hashOfConfig":"9"},{"size":3092,"mtime":1607205301707,"results":"14","hashOfConfig":"9"},{"size":2466,"mtime":1607202581289,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1yx1frq",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"C:\\project\\todolist-recoil\\src\\index.js",[],["32","33"],"C:\\project\\todolist-recoil\\src\\components\\TodoList.js",[],"C:\\project\\todolist-recoil\\src\\components\\TodoInput.js",[],"C:\\project\\todolist-recoil\\src\\components\\TodoFilter.js",[],"C:\\project\\todolist-recoil\\src\\App.js",[],"C:\\project\\todolist-recoil\\src\\components\\TodoItem.js",[],"C:\\project\\todolist-recoil\\src\\store\\todoList.js",["34","35"],"import { selector, useSetRecoilState } from \"recoil\";\r\nimport { atom } from \"recoil\";\r\n\r\nlet today = new Date();\r\nlet date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\nlet time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\nlet dateTime = date+' '+time;\r\n\r\nconst todoListDefault = [\r\n  {\r\n    id: '1576996323453',\r\n    title: \"sweep picking traning\",\r\n    time:'2020-12-5 3:52:12:40',\r\n    isComplete: true,\r\n  },\r\n  {\r\n    id: '1765413549953',\r\n    title: \"feed the dog\",\r\n    time:'2018-8-3 11:12:43',\r\n    isComplete: false,\r\n  },\r\n];\r\n\r\n//state\r\n\r\nexport const todoList = atom({\r\n  key: \"todoList\",\r\n  default: todoListDefault,\r\n});\r\n\r\nexport const filterOption = atom({\r\n  key: \"filterOption\",\r\n  default: \"Show All\",\r\n});\r\n\r\n//selector\r\n\r\nexport const totalTodo = selector({\r\n  key:\"totalTodo\",\r\n  get:({get})=>{\r\n    let _todolist = get(todoList)\r\n    return{\r\n      all:_todolist.length,\r\n      complete:_todolist.filter(todo => todo.isComplete).length,\r\n      unComplete:_todolist.filter(todo => !todo.isComplete).length,\r\n    }\r\n  }\r\n})\r\n\r\nexport const filterTodoList = selector({\r\n  key: \"filterTodoList\",\r\n  get: ({ get }) => {\r\n    let _todolist = [...get(todoList)];\r\n    switch (get(filterOption)) {\r\n      case \"Show All\":\r\n        return _todolist;\r\n      case \"Show Complete\":\r\n        return _todolist.filter((todo) => todo.isComplete);\r\n      case \"Show UnComplete\":\r\n        return _todolist.filter((todo) => !todo.isComplete);\r\n      default:\r\n        return _todolist;\r\n    }\r\n  },\r\n});\r\n\r\nexport const addTodo = selector({\r\n  key: \"addTodo\",\r\n  set: ({ set, get }, title) => {\r\n    let oldState = get(todoList);\r\n    set(todoList, [\r\n      ...oldState,\r\n      {\r\n        id:Date.now(),\r\n        title: title,\r\n        time:dateTime,\r\n        isComplete: false,\r\n      },\r\n    ]);\r\n  },\r\n});\r\n\r\nexport const toggleTodoStatus = selector({\r\n  key: \"toggleTodoStatus\",\r\n  set: ({ set, get }, id) => {\r\n    let oldState = JSON.parse(JSON.stringify(get(todoList)));\r\n    set(\r\n      todoList,\r\n      oldState.map((todo) => {\r\n        todo.id === id && (todo.isComplete = !todo.isComplete);\r\n        return todo;\r\n      })\r\n    );\r\n  },\r\n});\r\n\r\nexport const removeTodo = selector({\r\n  key: \"RemoveTodo\",\r\n  set: ({ set, get }, id) => {\r\n    let oldState = JSON.parse(JSON.stringify(get(todoList)));\r\n    set(\r\n      todoList,\r\n      oldState.filter((todo) => todo.id != id )\r\n    );\r\n  },\r\n});\r\n\r\n",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":1,"column":20,"nodeType":"42","messageId":"43","endLine":1,"endColumn":37},{"ruleId":"44","severity":1,"message":"45","line":103,"column":41,"nodeType":"46","messageId":"47","endLine":103,"endColumn":43},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'useSetRecoilState' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]